version: '3.8'

services:
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./mongo_data:/data/db # local folder to persist data in a volume managed by docker

  redis:
    image: redis
    ports:
      - 6379:6379
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./redis_data:/data

  server:
    image: hello-backend-dev
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3000:3000
    environment:
      - REDIS_URL=redis://redis:6379 # dont use localhost, use the service name and internal port
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
    container_name: hello-backend-dev # This will name the container hello-front-dev
  # debug-helper:
  #   image: busybox
  # docker compose run debug-helper wget -O - http://server:3000
# volumes:    # uncomment this if you want to persist data in a volume managed by docker
#   mongo_data:
## execute the following command to start the container
# docker compose -f docker-compose-dev.yml up
