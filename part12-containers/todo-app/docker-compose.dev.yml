version: '3.8' # Version 3.8 is quite new and should work

# services:
#   app: # The name of the service, can be anything
#     image: hello-front-dev # Declares which image to use
#     build: . # Declares where to build if image is not found
#     ports: # Declares the ports to publish
#       - 3000:3000

services:
  app:
    image: hello-front-dev
    build:
      context: .
      dockerfile: ./todo-frontend/dev.Dockerfile
    volumes:
      - ./todo-frontend/:/usr/src/app
    ports:
      - 3000:3000
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080/api/
    container_name: hello-front-dev2

  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db # local folder to persist data in a volume managed by docker

  redis:
    image: redis
    ports:
      - 6379:6379
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data

  server:
    image: hello-backend-dev
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: ./todo-backend/dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-backend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3001:3000
    environment:
      - REDIS_URL=redis://redis:6379 # dont use localhost, use the service name and internal port
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
    container_name: hello-backend-dev2 # This will name the container hello-front-dev

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy2
    depends_on:
      - app # wait for the frontend container to be started
      - server # wait for the backend container to be started


  # debug-helper:
  #   image: busybox
# execute the following command to start the container
# docker compose -f docker-compose.dev.yml  up
